// This file is automatically generated. Do not edit it directly.
import { createClient } from "@supabase/supabase-js";
import type { Database } from "./types";

const SUPABASE_URL = "https://ehqlkafauehdpqzrdkia.supabase.co";
const SUPABASE_PUBLISHABLE_KEY =
  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVocWxrYWZhdWVoZHBxenJka2lhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk3MzE2NTAsImV4cCI6MjA2NTMwNzY1MH0.b9QDfH7wjlYfwK1-_QhaaRcN1CWIuC3qoHcyh1NYoRU";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Validate configuration
if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  console.error(
    "❌ Supabase configuration missing. Check SUPABASE_URL and SUPABASE_PUBLISHABLE_KEY",
  );
}

export const supabase = createClient<Database>(
  SUPABASE_URL,
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
      flowType: "pkce",
    },
    global: {
      headers: {
        "x-application-name": "FlickPick",
      },
      fetch: (input, init) => {
        // Add timeout and better error handling
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 second timeout

        return fetch(input, {
          ...init,
          signal: controller.signal,
        })
          .finally(() => clearTimeout(timeoutId))
          .catch((error) => {
            if (error.name === "AbortError") {
              throw new Error(
                "Request timeout - check your internet connection",
              );
            }
            throw error;
          });
      },
    },
    realtime: {
      params: {
        eventsPerSecond: 2,
      },
    },
  },
);

// Test connection on initialization
supabase.auth.getSession().catch((error) => {
  console.warn("⚠️ Initial Supabase connection test failed:", error.message);
});
